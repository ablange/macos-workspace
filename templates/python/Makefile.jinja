# This Makefile was automatically generated using the macos-workspace Python template.
.PHONY: help setup docker start stop clean bash dependencies
help:
	@echo "\
	\n Makefile for Python project: {{project_name}}    \
	\n \
  	\n Usage:                                                                   \
    \n   - Run 'make setup' to initialize your development environment.         \
    \n   - Run 'make dependencies' to install Python and OS packages.           \
    \n   - Run 'make clean' before 'make setup' to build a new Docker image.    \
    \n \
	\n Example:																	\
    \n   $ make <COMMAND> 														\
    \n   e.g., $ make setup 													\
    \n \
    \n Commands:																\
    \n   bash           Run interactive Bash shell inside Docker container		\
    \n   clean          delete local development environment    				\
    \n   dependencies   install Python and OS dependencies      				\
    \n   docs           generate Sphinx documentation from code 				\
    \n   lint           run linter manually                     				\
    \n   precommit      enable pre-commit code linter           				\
    \n   precommit_stop disable pre-commit code linter          				\
    \n   setup          initialize local development environment				\
    \n   start          start Docker container                  				\
    \n   stop           stop Docker container                   				\
    \n   test           run tests and generate coverage report  				\
	"

setup: docker
	echo 'Initializing your local development environment ... '


docker:
	echo 'Initializing Docker image and container ...'
	docker build -t {{project_name}} .
	docker run -d --name {{project_name}}_container -it -p 8000:8000 -v ~/repos/{{project_name}}:/home/repos/{{project_name}} {{project_name}}


start:
	docker start {{project_name}}_container


stop:
	docker stop {{project_name}}_container


clean:
	echo 'Deleting Docker image and container ...'
	docker stop {{project_name}}_container
	docker container rm -f {{project_name}}_container
	docker image rm -f {{project_name}}


bash:
	docker exec -it {{project_name}}_container sh


dependencies:
	echo 'Installing Python and OS packages ... ...'
	docker exec -it {{project_name}}_container pip-compile --output-file=requirements.txt pyproject.toml
	docker exec -it {{project_name}}_container pip check && pip install -r requirements.txt
